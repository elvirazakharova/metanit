
def plus():
    # Локальная область видимости функции `plus()`
    print('Словарь глобальных переменных в начале определения функции `plus()`:\n', 
          {key: val for key, val in globals().items() if 'global' in key})
    # `global_a` еще ни где не определена 
    global global_a # Глобальные переменные могут отсутствовать при их создании
    global_a = 50 # Создаст переменную `global_a` в глобальной области видимости
    global_a = global_a - 10
    
    def nested():
        """Вложенная функция `nested()`"""
        # локальная область видимости вложенной функции nested()

        # Что бы изменить глобальную переменную `global_a`, мы  
        # должны указать с помощью оператора global, что эта 
        # переменная для вложенной функции то же является глобальной
        global global_a
        global_a = global_a - 10

        # С помощью оператора `global` можно создавать 
        # глобальные переменные, так же во вложенных функциях 
        global global_b
        global_b = 0 # Создаст переменную `global_b` в глобальной области видимости
        global_b = global_b + 5
    
    # Выполним вложенную функцию
    nested()
    
    # Изменим глобальную переменную `global_b`, созданную 
    # во вложенной функции, для этого укажем с помощью 
    # оператора `global`, что эта переменная для родительской 
    # функции то же является глобальной
    global global_b
    global_b = global_b + 5
    
    print('Словарь глобальных переменных в конце определения функции `plus()`:\n', 
          {key: val for key, val in globals().items() if 'global' in key})


# Глобальная область видимости. Какие либо переменные отсутствуют.
# вызов функции plus()
plus()

global_a = global_a + 100
print(global_a, '=> глобальная переменная global_a, созданная '
      'в функции plus() изменена в глобальной области видимости')

global_b = global_b + 50
print(global_b, '=> глобальная переменная global_b, созданная '
      'во вложенной функции nested() изменена в глобальной области видимости')